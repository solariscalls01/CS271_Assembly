Microsoft (R) Macro Assembler Version 14.33.31630.0	    12/04/22 11:49:33
-String Primitives and Macros       (Dy_B.asm		     Page 1 - 1


				TITLE String Primitives and Macros       (Dy_B.asm)

				; Author: Brian Dy
				; Last Modified: 12/4/2022
				; OSU email address: DyB@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                Due Date: 12/4/2022
				; Description: A program to implement and test two macros for string processing. Uses two macros mGetString and mDisplayString and two procedures ReadVal and WriteVal which invoke the macros. User enters 10 signed integers which displays the sum and displays the averages. 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 00000064			MAXSIZE = 100

				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; A macro to print the desired string, which is stored in memory
				;
				; Preconditions: do not use edx arguments
				;
				; Receives:
				; aString = array address
				; 
				; returns: prints the string 
				; ---------------------------------------------------------------------------------
				mDisplayString	MACRO	aString
					PUSH	EDX
					MOV		EDX, aString
					CALL	WriteString
					CALL	CrLf
					POP		EDX

				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Displays the userprompt and stores the inputted string into memory
				;
				; Preconditions: do not use edx, ecx as arguments
				;
				; Receives:
				; PROMPT = array address
				; inString = array type
				; MAXSIZE = array length
				; sLen	= array size
				;
				; returns: inString = generated string address

				; -----------------------------------------------------------------------
				mGetString	MACRO	PROMPT, inString, MAXSIZE, sLEN
					PUSH		EDX
					PUSH		ECX
					MOV			EDX, PROMPT
					CALL		WriteString
					MOV			EDX, inString
					MOV			ECX, MAXSIZE
					CALL		ReadString
					MOV			sLen, EAX
					POP			ECX		
					POP			EDX

				ENDM
				; -----------------------------------------------------------------------


 00000000			.data
 00000000 50 52 4F 47 52		intro				Byte	"PROGRAMMING ASSIGNMENT 6: Designing low-level I/O Procedures", 13, 10, 0
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   50 72 6F 63 65
	   64 75 72 65 73
	   0D 0A 00
 0000003F 57 72 69 74 74		intro2				BYTE	"Written by: Brian Dy", 13, 10, 0
	   65 6E 20 62 79
	   3A 20 42 72 69
	   61 6E 20 44 79
	   0D 0A 00
 00000056 50 6C 65 61 73		instructions		BYTE	"Please provide 10 signed decimal integers. ", 13, 10
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 20 0D 0A
 00000083  45 61 63 68 20							BYTE	"Each number needs to be small enough to fit inside a 32 bit register. After you have finished inputting ", 13,10
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   41 66 74 65 72
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 0D
	   0A
 000000ED  74 68 65 20 72							BYTE	"the raw numbers I will display a list of the integers, their sum, and their average value.", 0		
	   61 77 20 6E 75
	   6D 62 65 72 73
	   20 49 20 77 69
	   6C 6C 20 64 69
	   73 70 6C 61 79
	   20 61 20 6C 69
	   73 74 20 6F 66
	   20 74 68 65 20
	   69 6E 74 65 67
	   65 72 73 2C 20
	   74 68 65 69 72
	   20 73 75 6D 2C
	   20 61 6E 64 20
	   74 68 65 69 72
	   20 61 76 65 72
	   61 67 65 20 76
	   61 6C 75 65 2E
	   00
 00000148 50 6C 65 61 73		prompt				BYTE	"Please enter a signed number: ", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000167  00000064 [			inString			BYTE	MAXSIZE DUP(?)	;input user string
	    00
	   ]
 000001CB  00000064 [			outString			BYTE	MAXSIZE DUP(?)	;out user string
	    00
	   ]
 0000022F 54 68 61 74 20		errorMsg			BYTE	"That is not a valid input.", 13, 10, 0
	   69 73 20 6E 6F
	   74 20 61 20 76
	   61 6C 69 64 20
	   69 6E 70 75 74
	   2E 0D 0A 00
 0000024C 59 6F 75 20 65		enteredNums			BYTE	"You entered the following numbers: ", 13, 10, 0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   0D 0A 00
 00000272 54 68 65 20 74		avg					BYTE	"The truncated average is: ", 13, 10, 0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 0D 0A 00
 0000028F 54 68 65 20 73		sum					BYTE	"The sum of these numbers is: ", 13, 10, 0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 0D
	   0A 00
 000002AF 00000000			sLen				DWORD	?
 000002B3 00000000			storeNum			SDWORD	?
 000002B7  0000000A [			numArray			SDWORD	10 DUP(?)	; array that stores our 10 numbers
	    00000000
	   ]
 000002DF 00000000			convertString		SDWORD	0
 000002E3 00000000			sumNum				SDWORD	0
 000002E7 54 68 61 6E 6B		endMsg				BYTE	"Thanks for playing. Couldn't figure out the WriteVal part...", 13, 10, 0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 2E 20
	   43 6F 75 6C 64
	   6E 27 74 20 66
	   69 67 75 72 65
	   20 6F 75 74 20
	   74 68 65 20 57
	   72 69 74 65 56
	   61 6C 20 70 61
	   72 74 2E 2E 2E
	   0D 0A 00


 00000000			.code

 00000000			main PROC

				; print the introduction
 00000000  68 00000000 R		PUSH	OFFSET	Intro	; EBP + 16
 00000005  68 0000003F R		PUSH	OFFSET	intro2	; EBP + 12
 0000000A  68 00000056 R		PUSH	OFFSET	instructions	; EBP + 8
 0000000F  E8 00000097			CALL	Introduction	; EBP + 4

				; setLoop
 00000014  B9 0000000B			MOV		ECX, 11  ; sets loop array to get 10 signed integers in the array
 00000019  8B D9			MOV		EBX, ECX	; store counter in EBX to keep track of ECX

 0000001B			_getUserInput:
 0000001B  68 00000148 R		PUSH	OFFSET PROMPT	; EBP + 32
 00000020  68 000002B3 R		PUSH	OFFSET storeNum	; EBP + 28
 00000025  FF 35 000002DF R		PUSH	convertString	; EBP + 24
 0000002B  68 00000167 R		PUSH	OFFSET inString	; EBP + 20
 00000030  68 000001CB R		PUSH	oFFSET outString	; EBP + 16
 00000035  6A 64			PUSH	OFFSET MAXSIZE	; EBP + 12
 00000037  FF 35 000002AF R		PUSH	sLen	; EBP + 8
 0000003D  E8 000000A8			Call	ReadVal
					
 00000042  4B				DEC		EBX
 00000043  8B CB			MOV		ECX, EBX
 00000045  A1 000002B3 R		MOV		EAX,storeNum
 0000004A  01 05 000002E3 R		Add		sumNum, EAX
 00000050  AB				STOSD	
 00000051  E2 C8			loop	_getuserInput

 00000053			_printValues:
 00000053  68 0000024C R		PUSH	OFFSET enteredNums	; EBP + 20
 00000058  68 00000167 R		PUSH	OFFSET inString	; EBP + 16
 0000005D  68 000001CB R		PUSH	OFFSET outString	; EBP + 12
 00000062  FF 35 000002AF R		PUSH	sLen	; EBP + 8
 00000068  E8 00000102			CALL	WriteVal

 0000006D			_printSum:
 0000006D  68 0000028F R		PUSH	OFFSET sum	; EBP + 20
 00000072  68 00000167 R		PUSH	OFFSET inString	; EBP + 16
 00000077  68 000001CB R		PUSH	OFFSET outString	; EBP + 12
 0000007C  FF 35 000002AF R		PUSH	sLen	; EBP + 8
 00000082  E8 000000E8			CALL	WriteVal	

 00000087			_printAverage:
 00000087  68 00000272 R		PUSH	OFFSET avg
 0000008C  68 00000167 R		PUSH	OFFSET inString
 00000091  68 000001CB R		PUSH	OFFSET outString
 00000096  FF 35 000002AF R		PUSH	sLen	; EBP + 8
 0000009C  E8 000000CE			CALL	WriteVal

				; endMsg
 000000A1  68 000002E7 R		PUSH	OFFSET	endMsg	
 000000A6  E8 000000EC			CALL	ClosingMessage
					

 000000AB			main ENDP
				; -----------------------------------------------------------------------
 000000AB			Introduction PROC
				; Uses the mDisplayString Macro to print the introduction and instructions 
				; Preconditions: None
				; Registers Changed: EDX
				; Receives: Receives Intro, Intro2, Instructions
				; Returns: None 
				; -----------------------------------------------------------------------

 000000AB  55				PUSH	EBP
 000000AC  8B EC			MOV		EBP, ESP

					mDisplayString	OFFSET	Intro
 000000AE  52		     1		PUSH	EDX
 000000AF  BA 00000000 R     1		MOV		EDX, OFFSET	Intro
 000000B4  E8 00000000 E     1		CALL	WriteString
 000000B9  E8 00000000 E     1		CALL	CrLf
 000000BE  5A		     1		POP		EDX
					mDisplayString	OFFSET	Intro2
 000000BF  52		     1		PUSH	EDX
 000000C0  BA 0000003F R     1		MOV		EDX, OFFSET	Intro2
 000000C5  E8 00000000 E     1		CALL	WriteString
 000000CA  E8 00000000 E     1		CALL	CrLf
 000000CF  5A		     1		POP		EDX
					mDisplayString	OFFSET	Instructions
 000000D0  52		     1		PUSH	EDX
 000000D1  BA 00000056 R     1		MOV		EDX, OFFSET	Instructions
 000000D6  E8 00000000 E     1		CALL	WriteString
 000000DB  E8 00000000 E     1		CALL	CrLf
 000000E0  5A		     1		POP		EDX
 000000E1  E8 00000000 E		CALL	CrLF

 000000E6  5D				POP EBP
 000000E7  C2 000C			RET 12


 000000EA			Introduction ENDP
				; -----------------------------------------------------------------------

				; -----------------------------------------------------------------------
 000000EA			ReadVal PROC
				; Procedure to read the value of the user
				; Preconditions: None
				; Registers Changed: ESI, EDI
				; Receives: Receives storenum, convertstring, inString, MAXSIZE, sLen
				; Returns: None
				; -----------------------------------------------------------------------
 000000EA  55				PUSH	EBP
 000000EB  8B EC			MOV		EBP, ESP
 000000ED  8B 3D 000002B7 R		MOV		EDI, numArray

 000000F3				_getString:
						mGetString	[EBP + 32], [EBP + 20], [EBP + 12], [EBP + 8]
 000000F3  52		     1		PUSH		EDX
 000000F4  51		     1		PUSH		ECX
 000000F5  8B 55 20	     1		MOV			EDX, [EBP + 32]
 000000F8  E8 00000000 E     1		CALL		WriteString
 000000FD  8B 55 14	     1		MOV			EDX, [EBP + 20]
 00000100  8B 4D 0C	     1		MOV			ECX, [EBP + 12]
 00000103  E8 00000000 E     1		CALL		ReadString
 00000108  89 45 08	     1		MOV			[EBP + 8], EAX
 0000010B  59		     1		POP			ECX		
 0000010C  5A		     1		POP			EDX

 0000010D  8B 75 14				MOV		ESI, [EBP + 20]	; gets the user input to the ESI source
 00000110  8B 7D 1C				MOV		EDI, [EBP + 28]	; 
 00000113  8B 4D 08				MOV		ECX, [EBP + 8]	; push length of input to ECX loop counter. e.g., if user enters 2 digits, will loop 2x, 3 digits = 3x etc... 

 00000116				_checkEmptyValue:	
						; checks if the user inputted value is an empty string e.g., if user just hits enter for the input value
 00000116  83 F8 00				CMP		EAX, 0
 00000119  74 40				JZ		_error

 0000011B				_checkOverFlow:
						; Checks if the user input is > 11 characters and prints an error message 
 0000011B  8B 45 08				MOV		EAX, [EBP + +8]
 0000011E  83 F8 0B				CMP		EAX, 11
 00000121  7F 38				JG		_error

 00000123				_checkSign:
						; checks whether the user inputs a + or - when entering an integer. 
 00000123  8A 06				MOV		AL, [ESI]		; gets value of ESI and store into AL reg
 00000125  3C 2B				CMP		AL, 43			; 43 is the decimal sign for "+"
 00000127  74 06				JE		_positiveSign
 00000129  3C 2D				CMP		AL, 45			; 45 is the decimal sign for the "-"
 0000012B  74 06				JE		_negativeSign	; if negative sign is detected jump to the _negativesign label
 0000012D  EB 06				JMP		_convertString	

 0000012F				_positiveSign:	
						; check if user decides to enter a + in front of a number e.g., +31
 0000012F  46					INC		ESI
 00000130  49					DEC		ECX
 00000131  EB 02				JMP		_convertString
					
 00000133				_negativeSign:
						; checks if user decides to enter a signed integer "-" e.g., -21
 00000133  46					inc		ESI		; increment the ESI counter to access the - value. Hex value for negative sign = 2d
 00000134  49					DEC		ECX		; decrement ECX counter due to the '-' sign digit. e.g., -1 is considered 2 values therefore decrease ECX to only account for the 1. 


 00000135				_convertString:
 00000135  AC					LODSB	; puts byte in AL register 

					; Check if value is between 48-57 for the decimal values to convert to char string numbers
 00000136  3C 30				CMP AL, 48
 00000138  7C 21				JL	_error
 0000013A  3C 39				CMP	AL, 57
 0000013C  7F 1D				JG	_error

 0000013E  53					PUSH		EBX			; preserve the loop counter to add back into ECX
 0000013F  2C 30				SUB			AL, 48
 00000141  8B 5D 18				MOV			EBX, [ebp+24]
 00000144  50					PUSH		EAX
 00000145  B8 0000000A				MOV			EAX, 10d		; gets ready to add the value to 10 times the current total
 0000014A  F7 E3				MUL			EBX
 0000014C  8B D8				MOV			EBX, EAX
 0000014E  58					POP			EAX			; preserve the value back into EAX 
 0000014F  03 D8				ADD			EBX, EAX	; adds the strings together 
 00000151  89 5D 18				MOV			[EBP + 24], EBX		; store into the convertstring variable 
 00000154  5B					POP			EBX					; preserve loop counter back to EBX
 00000155  E2 DE				LOOP		_convertString

 00000157				_finish:
 00000157  5D				POP		EBP
 00000158  C2 001C			RET		28

 0000015B				_error:
					mDisplayString	OFFSET	errorMsg	; uses MACRO to print error message if incorrect input
 0000015B  52		     1		PUSH	EDX
 0000015C  BA 0000022F R     1		MOV		EDX, OFFSET	errorMsg
 00000161  E8 00000000 E     1		CALL	WriteString
 00000166  E8 00000000 E     1		CALL	CrLf
 0000016B  5A		     1		POP		EDX
 0000016C  43				INC		EBX		; preserves the loop counter incase of error message to add back to ECX
 0000016D  EB E8			JMP	_finish


 0000016F			ReadVal ENDP
				; -----------------------------------------------------------------------

				; printSum
 0000016F			WriteVal PROC
 0000016F  E8 00000000 E		CALL	CRLF
 00000174  55				PUSH	EBP
 00000175  8B EC			MOV		EBP, ESP
 00000177  8B 55 14			MOV		EDX, [EBP + 20]
 0000017A  E8 00000000 E		CALL	WriteString


 0000017F  5D				POP	EBP
 00000180  C2 0010			RET 16

				; -----------------------------------------------------------------------

				; printAvg

 00000183  E8 00000000 E		CALL	CRLF
 00000188  55				PUSH	EBP
 00000189  8B EC			MOV		EBP, ESP
 0000018B  8B 55 14			MOV		EDX, [EBP + 20 ]
 0000018E  E8 00000000 E		CALL	WriteString


 00000193  5D				POP	EBP
 00000194  C2 0010			RET 16
 00000197			WriteVal ENDP



				; -----------------------------------------------------------------------
 00000197			ClosingMessage PROC
				; Procedure to print a closing statement from the .data endMsg 
				; Preconditions: None
				; Postconditions: None
				; Registers Changed: EDX
				; Receives: None
				; Returns: None
				; -----------------------------------------------------------------------

 00000197  E8 00000000 E		CALL	CRLF
 0000019C  55				PUSH	EBP
 0000019D  8B EC			MOV		EBP, ESP
 0000019F  8B 55 08			MOV		EDX, [EBP + 8]
 000001A2  E8 00000000 E		CALL	WriteString
 000001A7  C3				RET

 000001A8			ClosingMessage ENDP

				;-------------------------------------------------------------------------
				END main
Microsoft (R) Macro Assembler Version 14.33.31630.0	    12/04/22 11:49:33
-String Primitives and Macros       (Dy_B.asm		     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000326 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001A8 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ClosingMessage . . . . . . . . .	P Near	 00000197 _TEXT	Length= 00000011 Public STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Introduction . . . . . . . . . .	P Near	 000000AB _TEXT	Length= 0000003F Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000EA _TEXT	Length= 00000085 Public STDCALL
  _getString . . . . . . . . . .	L Near	 000000F3 _TEXT	
  _checkEmptyValue . . . . . . .	L Near	 00000116 _TEXT	
  _checkOverFlow . . . . . . . .	L Near	 0000011B _TEXT	
  _checkSign . . . . . . . . . .	L Near	 00000123 _TEXT	
  _positiveSign  . . . . . . . .	L Near	 0000012F _TEXT	
  _negativeSign  . . . . . . . .	L Near	 00000133 _TEXT	
  _convertString . . . . . . . .	L Near	 00000135 _TEXT	
  _finish  . . . . . . . . . . .	L Near	 00000157 _TEXT	
  _error . . . . . . . . . . . .	L Near	 0000015B _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000016F _TEXT	Length= 00000028 Public STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000AB Public STDCALL
  _getUserInput  . . . . . . . .	L Near	 0000001B _TEXT	
  _printValues . . . . . . . . .	L Near	 00000053 _TEXT	
  _printSum  . . . . . . . . . .	L Near	 0000006D _TEXT	
  _printAverage  . . . . . . . .	L Near	 00000087 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXSIZE  . . . . . . . . . . . .	Number	 00000064h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avg  . . . . . . . . . . . . . .	Byte	 00000272 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
convertString  . . . . . . . . .	DWord	 000002DF _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
endMsg . . . . . . . . . . . . .	Byte	 000002E7 _DATA	
enteredNums  . . . . . . . . . .	Byte	 0000024C _DATA	
errorMsg . . . . . . . . . . . .	Byte	 0000022F _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inString . . . . . . . . . . . .	Byte	 00000167 _DATA	
instructions . . . . . . . . . .	Byte	 00000056 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 0000003F _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numArray . . . . . . . . . . . .	DWord	 000002B7 _DATA	
outString  . . . . . . . . . . .	Byte	 000001CB _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000148 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sLen . . . . . . . . . . . . . .	DWord	 000002AF _DATA	
storeNum . . . . . . . . . . . .	DWord	 000002B3 _DATA	
sumNum . . . . . . . . . . . . .	DWord	 000002E3 _DATA	
sum  . . . . . . . . . . . . . .	Byte	 0000028F _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
