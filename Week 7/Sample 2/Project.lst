Microsoft (R) Macro Assembler Version 14.33.31630.0	    11/20/22 22:01:44
SquareArrayFiller.asm					     Page 1 - 1



				; Description: Sorting and Counting Random Integers
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				;global constants
 = 000000C8			ARRAYSIZE = 200
 = 0000000A			LO = 10
 = 0000001D			HI = 29
 00000000			.data
 00000000 53 6F 72 74 69	intro       BYTE "Sorting and Counting Random integers!",0
	   6E 67 20 61 6E
	   64 20 43 6F 75
	   6E 74 69 6E 67
	   20 52 61 6E 64
	   6F 6D 20 69 6E
	   74 65 67 65 72
	   73 21 00
 00000026 50 72 6F 67 72	intro2       BYTE "Programmed by Pat Stumbaugh",0
	   61 6D 6D 65 64
	   20 62 79 20 50
	   61 74 20 53 74
	   75 6D 62 61 75
	   67 68 00
 00000042 54 68 69 73 20	intro3       BYTE "This program generates 200 random numbers in the range "
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 32 30
	   30 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 20 69 6E 20
	   74 68 65 20 72
	   61 6E 67 65 20
 00000079  5B 31 30 20 2E	           BYTE "[10 ... 29], displays the original list, sorts the list, "
	   2E 2E 20 32 39
	   5D 2C 20 64 69
	   73 70 6C 61 79
	   73 20 74 68 65
	   20 6F 72 69 67
	   69 6E 61 6C 20
	   6C 69 73 74 2C
	   20 73 6F 72 74
	   73 20 74 68 65
	   20 6C 69 73 74
	   2C 20
 000000B2  64 69 73 70 6C	           BYTE "displays the median value, displays the list sorted in "
	   61 79 73 20 74
	   68 65 20 6D 65
	   64 69 61 6E 20
	   76 61 6C 75 65
	   2C 20 64 69 73
	   70 6C 61 79 73
	   20 74 68 65 20
	   6C 69 73 74 20
	   73 6F 72 74 65
	   64 20 69 6E 20
 000000E9  61 73 63 65 6E	           BYTE "ascending order, then displays the number of instances"
	   64 69 6E 67 20
	   6F 72 64 65 72
	   2C 20 74 68 65
	   6E 20 64 69 73
	   70 6C 61 79 73
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   69 6E 73 74 61
	   6E 63 65 73
 0000011F  6F 66 20 65 61	           BYTE "of each generated value.",0
	   63 68 20 67 65
	   6E 65 72 61 74
	   65 64 20 76 61
	   6C 75 65 2E 00
 00000138 59 6F 75 72 20	unsort       BYTE "Your unsorted random numbers: ",0
	   75 6E 73 6F 72
	   74 65 64 20 72
	   61 6E 64 6F 6D
	   20 6E 75 6D 62
	   65 72 73 3A 20
	   00
 00000157 59 6F 75 72 20	sort       BYTE "Your sorted random numbers:",0
	   73 6F 72 74 65
	   64 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 3A 00
 00000173 4C 69 73 74 20	medianIntro   BYTE "List Median: ",0
	   4D 65 64 69 61
	   6E 3A 20 00
 00000181 59 6F 75 72 20	instances   BYTE "Your list of instances of each generated number, "
	   6C 69 73 74 20
	   6F 66 20 69 6E
	   73 74 61 6E 63
	   65 73 20 6F 66
	   20 65 61 63 68
	   20 67 65 6E 65
	   72 61 74 65 64
	   20 6E 75 6D 62
	   65 72 2C 20
 000001B2  73 74 61 72 74	           BYTE "starting with the number of 10s:",0
	   69 6E 67 20 77
	   69 74 68 20 74
	   68 65 20 6E 75
	   6D 62 65 72 20
	   6F 66 20 31 30
	   73 3A 00
 000001D3 20 00			spaces       BYTE " ",0
 000001D5 59 6F 75 72 20	cList       BYTE "Your list of instances of each generated number, "
	   6C 69 73 74 20
	   6F 66 20 69 6E
	   73 74 61 6E 63
	   65 73 20 6F 66
	   20 65 61 63 68
	   20 67 65 6E 65
	   72 61 74 65 64
	   20 6E 75 6D 62
	   65 72 2C 20
 00000206  73 74 61 72 74	           BYTE "starting with the number of 10s:",0
	   69 6E 67 20 77
	   69 74 68 20 74
	   68 65 20 6E 75
	   6D 62 65 72 20
	   6F 66 20 31 30
	   73 3A 00
 00000227 47 6F 6F 64 62	goodbye       BYTE "Goodbye, and thanks for using my program!",0
	   79 65 2C 20 61
	   6E 64 20 74 68
	   61 6E 6B 73 20
	   66 6F 72 20 75
	   73 69 6E 67 20
	   6D 79 20 70 72
	   6F 67 72 61 6D
	   21 00
 00000251  000000C8 [		array       DWORD 200 DUP(?)
	    00000000
	   ]
 00000571  000000C8 [		countArray   DWORD 200 DUP(?)
	    00000000
	   ]
 00000891 00000000		cArraySize   DWORD 0

 00000000			.code
 00000000			main PROC
				;introduce the program
 00000000  68 00000000 R	   push   OFFSET intro
 00000005  68 00000026 R	   push   OFFSET intro2
 0000000A  68 00000042 R	   push   OFFSET intro3
 0000000F  E8 000000FC		   call   introduction
				;fill the array
 00000014  68 00000251 R	   push   OFFSET array
 00000019  68 000000C8		   push   ARRAYSIZE
 0000001E  6A 1D		   push   HI
 00000020  6A 0A		   push   LO
 00000022  E8 0000011C		   call   fillArray
 00000027  E8 00000000 E	   call   CrLf
				;display title of unsorted array
 0000002C  68 00000138 R	   push   OFFSET unsort
 00000031  E8 00000130		   call   displayTitle
 00000036  E8 00000000 E	   call   CrLf
				;display the unsorted list
 0000003B  68 00000251 R	   push   OFFSET array
 00000040  68 000000C8		   push   ARRAYSIZE
 00000045  68 000001D3 R	   push   OFFSET spaces
 0000004A  E8 00000126		   call   displayArray                   ;display array call #1
 0000004F  E8 00000000 E	   call   CrLf
 00000054  E8 00000000 E	   call   CrLf
				;sort our array
 00000059  68 00000251 R	   push   OFFSET array
 0000005E  68 000000C8		   push   ARRAYSIZE
 00000063  E8 00000143		   call   sortList
				;display title of median
 00000068  68 00000173 R	   push   OFFSET medianIntro
 0000006D  E8 000000F4		   call   displayTitle
				;display median
 00000072  68 00000251 R	   push   OFFSET array
 00000077  68 000000C8		   push   ARRAYSIZE
 0000007C  E8 00000172		   call   displayMedian
 00000081  E8 00000000 E	   call   CrLf
 00000086  E8 00000000 E	   call   CrLf
				;display title of sorted array
 0000008B  68 00000157 R	   push   OFFSET sort
 00000090  E8 000000D1		   call   displayTitle
 00000095  E8 00000000 E	   call   CrLf
				  
				;display sorted list
 0000009A  68 00000251 R	   push   OFFSET array
 0000009F  68 000000C8		   push   ARRAYSIZE
 000000A4  68 000001D3 R	   push   OFFSET spaces
 000000A9  E8 000000C7		   call   displayArray                   ;display array call #2
 000000AE  E8 00000000 E	   call   CrLf
				;display title for count list
 000000B3  68 000001D5 R	   push   OFFSET cList
 000000B8  E8 000000A9		   call   displayTitle
 000000BD  E8 00000000 E	   call   CrLf
				;count the items in list and store them in countArray
 000000C2  68 00000251 R	   push   OFFSET array
 000000C7  68 00000571 R	   push   OFFSET countArray
 000000CC  68 000000C8		   push   ARRAYSIZE
 000000D1  68 00000891 R	   push   OFFSET cArraySize
 000000D6  E8 0000015E		   call   countList
				;display the counted array
 000000DB  68 00000571 R	   push   OFFSET countArray
 000000E0  FF 35 00000891 R	   push   cArraySize
 000000E6  68 000001D3 R	   push   OFFSET spaces
 000000EB  E8 00000085		   call   displayArray                   ;display array call #3
 000000F0  E8 00000000 E	   call   CrLf
 000000F5  E8 00000000 E	   call   CrLf
				;display goodbye message
 000000FA  68 00000227 R	   push   OFFSET goodbye
 000000FF  E8 00000062		   call   displayTitle
 00000104  E8 00000000 E	   call   CrLf
				   exit   ; exit to operating system
 00000109  6A 00	   *	    push   +000000000h
 0000010B  E8 00000000 E   *	    call   ExitProcess
 00000110			main ENDP
				;FUNCTIONS BELOW
				;***************************************************************************
				;introduces the program
				;receives: addresses of intro, intro2 and intro3
				;registers changed: ebp, edx
 00000110			introduction PROC
 00000110  55			   push   ebp
 00000111  8B EC		   mov       ebp, esp
 00000113  8B 55 10		   mov       edx, [ebp+16]
 00000116  E8 00000000 E	   call   WriteString
 0000011B  E8 00000000 E	   call   CrLf
 00000120  8B 55 0C		   mov       edx, [ebp+12]
 00000123  E8 00000000 E	   call   writeString
 00000128  E8 00000000 E	   call   CrLf
 0000012D  E8 00000000 E	   call   CrLf
 00000132  8B 55 08		   mov       edx, [ebp+8]
 00000135  E8 00000000 E	   call   writeString
 0000013A  E8 00000000 E	   call   CrLf
 0000013F  5D			   pop       ebp
 00000140  C2 000C		   ret       12
 00000143			introduction ENDP

				;fills the array with random numbers, within a specified range
				;receives: address of array, array's size, low and high bounds
				;registers changed: ebp, ecx, eax
 00000143			fillArray PROC
 00000143  55			   push   ebp
 00000144  8B EC		   mov       ebp, esp
 00000146  8B 75 14		   mov       esi, [ebp+20]           ;address of array
 00000149  8B 4D 10		   mov       ecx, [ebp+16]           ;arraySize
 0000014C			getNumber:
				;generate a random number within our range
 0000014C  8B 45 0C		   mov       eax, [ebp+12]           ;hi
 0000014F  2B 45 08		   sub       eax, [ebp+8]           ;lo
 00000152  40			   inc       eax
 00000153  E8 00000000 E	   call   RandomRange
 00000158  03 45 08		   add       eax, [ebp+8]           ;lo
				;store the random number in our next array position
 0000015B  89 06		   mov       [esi], eax
 0000015D  83 C6 04		   add       esi, 4
 00000160  E2 EA		   loop   getNumber
 00000162  5D			   pop       ebp
 00000163  C2 0010		   ret       16
 00000166			fillArray ENDP
				;display the title of the upcoming array
				;receives: address of title to display,
				;registers changed: ebp, edx
 00000166			displayTitle PROC
 00000166  55			   push   ebp
 00000167  8B EC		   mov       ebp, esp
 00000169  8B 55 08		   mov       edx, [ebp+8]           ;(whichever string we pushed in main)
 0000016C  E8 00000000 E	   call   WriteString
 00000171  5D			   pop       ebp
 00000172  C2 0004		   ret       4
 00000175			displayTitle ENDP

				;displays the called array
				;receives: address of array, size of the array, and spaces string
				;registers changed: ebp, ecx, edx, ebx, eax
 00000175			displayArray PROC
 00000175  55			   push   ebp
 00000176  8B EC		   mov       ebp, esp
				;setup the list and counter
 00000178  8B 75 10		   mov       esi, [ebp+16]           ;address of array
 0000017B  8B 4D 0C		   mov       ecx, [ebp+12]           ;arraySize
 0000017E  8B 55 08		   mov       edx, [ebp+8]           ;spaces
				;setup a columns counter
 00000181  BB 00000014		   mov       ebx, 20                  
				      
				;display the array
 00000186			L1:
 00000186  8B 06		   mov       eax, [esi]
 00000188  E8 00000000 E	   call   WriteDec
 0000018D  E8 00000000 E	   call   WriteString
 00000192  83 C6 04		   add       esi, 4
 00000195  4B			   dec       ebx
 00000196  83 FB 00		   cmp       ebx, 0
 00000199  75 0A		   jnz       continue
				;if out of columns, make a new line
 0000019B  BB 00000014		   mov       ebx, 20                   ;reset columns counter
 000001A0  E8 00000000 E	   call   CrLf
 000001A5			continue:
 000001A5  E2 DF		   loop   L1
 000001A7  5D			   pop       ebp
 000001A8  C2 000C		   ret       12
 000001AB			displayArray ENDP
				;sort list function sorts the list from lowest to highest
				;works by comparing the first number in the list to all the rest of the numbers
				;if a number lower than the current number is found, the two are switched,
				;and the search starts over from the beginning of that current number. Once
				;that number reaches an endpoint (no more to switch with), the function moves
				;on to the next number in the list and does the same.
				;receives: address of array, array's size
				;registers affected: ebp, ecx, ebx, eax
 000001AB			sortList PROC
 000001AB  55			   push   ebp
 000001AC  8B EC		   mov       ebp, esp
 000001AE  8B 4D 08		   mov       ecx, [ebp+8]           ;arraySize
 000001B1  8B 75 0C		   mov       esi, [ebp+12]           ;array
 000001B4  83 E9 01		   sub       ecx, 1                   ;to keep our loop control in bounds
 000001B7			start:
 000001B7  56			   push   esi
 000001B8  BB 00000000		   mov       ebx, 0
 000001BD			compare:
 000001BD  8B 06		   mov       eax, [esi]               ;move next number into eax
 000001BF  3B 46 04		   cmp       eax, [esi+4]           ;compare numbers
 000001C2  7F 0A		   jg       switch                   ;if needs to be switched, jump there
 000001C4  43			   inc       ebx                       ;if no switch, add to ebx counter
 000001C5  83 C6 04		   add       esi, 4
 000001C8  3B D9		   cmp       ebx, ecx               ;compare with what's left
 000001CA  74 0E		   je       L1                       ;if no more numbers, loop around again
 000001CC  EB EF		   jmp       compare
 000001CE			switch:
 000001CE  50			   push   eax
 000001CF  53			   push   ebx
 000001D0  E8 0000000F		   call   exchangeElements
 000001D5  5B			   pop       ebx
 000001D6  58			   pop       eax
 000001D7  5E			   pop       esi
 000001D8  EB DD		   jmp       start
				;if no switch, and at max, loop to next number to be compared
 000001DA			L1:
 000001DA  5E			   pop       esi
 000001DB  83 C6 04		   add       esi, 4
 000001DE  E2 D7		   loop   start
 000001E0  5D			   pop       ebp
 000001E1  C2 0008		   ret       8
 000001E4			sortList ENDP
				;swaps elements at current ESI position with element (assuming DWORD)
				;at next position, +4 address
				;receives: esi pointed to array position (must be setup before calling)
				;registers changed: ebp, eax, ebx
 000001E4			exchangeElements PROC
 000001E4  55			   push   ebp
 000001E5  8B EC		   mov       ebp, esp
				;swap items in array
 000001E7  8B 06		   mov       eax, [esi]               ;current number
 000001E9  8B 5E 04		   mov       ebx, [esi+4]           ;next number in array
 000001EC  89 1E		   mov       [esi], ebx
 000001EE  89 46 04		   mov       [esi+4], eax
 000001F1  5D			   pop       ebp
 000001F2  C3			   ret      
 000001F3			exchangeElements ENDP

				;displays the median in an array
				;receives: array, array's total size; address of median variable
				;registers affected: ebp, ebx, edx, eax
 000001F3			displayMedian PROC
 000001F3  55			   push   ebp
 000001F4  8B EC		   mov       ebp, esp
 000001F6  BB 00000002		   mov       ebx, 2
 000001FB  8B 75 0C		   mov       esi, [ebp+12]           ;array
				;check if list size is even or odd
 000001FE  BA 00000000		   mov       edx, 0
 00000203  8B 45 08		   mov       eax, [ebp+8]           ;arraySize
 00000206  99			   cdq
 00000207  F7 FB		   idiv   ebx
 00000209  8B C8		   mov       ecx, eax               ;move into the counter for following loops
 0000020B  83 FA 00		   cmp       edx, 0                   ;if 0, arraySize is even
 0000020E  74 0E		   je       L2
				;odd array
 00000210  8B C8		   mov       ecx, eax
 00000212  83 E9 01		   sub       ecx, 1
 00000215			L1:
 00000215  83 C6 04		   add       esi, 4
 00000218  E2 FB		   loop   L1
 0000021A  8B 06		   mov       eax, [esi]
 0000021C  EB 12		   jmp       continue
				;even array
 0000021E			L2:
 0000021E  83 C6 04		   add       esi, 4
 00000221  E2 FB		   loop   L2
				;if no direct median, combine two middle numbers and get average of those
 00000223  8B 06		   mov       eax, [esi]
 00000225  03 46 FC		   add       eax, [esi-4]
 00000228  BB 00000002		   mov       ebx, 2
 0000022D  99			   cdq
 0000022E  F7 FB		   idiv   ebx
				;display the new median
 00000230			continue:
 00000230  E8 00000000 E	   call   WriteDec
 00000235  5D			pop       ebp
 00000236  C2 0008		   ret       8
 00000239			displayMedian ENDP

				;countList: counts the number of instances for each number
				;receives: address of array, array's size
				;registers changed: ebp, ecx, eax, ebx, edx
 00000239			countList PROC
 00000239  55			   push   ebp
 0000023A  8B EC		   mov       ebp, esp
 0000023C  8B 75 14		   mov       esi, [ebp+20]       ;array
 0000023F  8B 4D 0C		   mov       ecx, [ebp+12]       ;array's size
				;count the number of similar numbers (in a sorted array)
				;if it encounters a different number, copy counted items tally into next spot,
				;of the countArray array then restart tally and move to next item
 00000242			restart:
 00000242  B8 00000001		   mov       eax, 1
 00000247			continue:
 00000247  8B 1E		   mov       ebx, [esi]
 00000249  3B 5E 04		   cmp       ebx, [esi+4]
 0000024C  75 0A		   jne       print
 0000024E  83 C0 01		   add       eax, 1
 00000251  83 C6 04		   add       esi, 4
 00000254  E2 F1		   loop   continue
 00000256  EB 11		   jmp       finish
 00000258			print:
 00000258  FF 75 10		   push   [ebp+16]           ;countArray
 0000025B  FF 75 08		   push   [ebp+8]               ;cArraySize
 0000025E  50			   push   eax                   ;number to add to array
 0000025F  E8 00000009		   call   addToList
 00000264  83 C6 04		   add       esi, 4
 00000267  E2 D9		   loop   restart
 00000269			finish:
 00000269  5D			   pop       ebp
 0000026A  C2 0010		   ret       16
 0000026D			countList ENDP
 0000026D			addToList PROC
 0000026D  55			   push   ebp
 0000026E  8B EC		   mov       ebp, esp
 00000270  8B 35 00000571 R	   mov       esi, [countArray]       ;countArray
 00000276  B8 00000005		   mov       eax, 5               ;number to be added
 0000027B  8B 0D 00000891 R	   mov       ecx, cArraySize       ;cArraySize
 00000281  83 F9 00		   cmp       ecx, 0
 00000284  74 05		   jz       finish
				;get to spot in array to add
 00000286			L1:
 00000286  83 C6 04		   add       esi, 4
 00000289  E2 FB		   loop   L1
				;add number to spot in countArray
 0000028B			finish:
 0000028B  89 06		   mov       [esi], eax

				;add one to the size of our cArraySize
				  
 0000028D  FF 05 00000891 R	   inc cArraySize
 00000293  8B 06		mov eax, [esi]
 00000295  E8 00000000 E	call writedec
 0000029A  E8 00000000 E	call crlf

 0000029F  5D			   pop       ebp
 000002A0  C2 000C		   ret       12
 000002A3			addToList ENDP
				END main
				Explanation: Please refer to solution in this step.
Microsoft (R) Macro Assembler Version 14.33.31630.0	    11/20/22 22:01:44
SquareArrayFiller.asm					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000895 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002A3 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
addToList  . . . . . . . . . . .	P Near	 0000026D _TEXT	Length= 00000036 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000286 _TEXT	
  finish . . . . . . . . . . . .	L Near	 0000028B _TEXT	
countList  . . . . . . . . . . .	P Near	 00000239 _TEXT	Length= 00000034 Public STDCALL
  restart  . . . . . . . . . . .	L Near	 00000242 _TEXT	
  continue . . . . . . . . . . .	L Near	 00000247 _TEXT	
  print  . . . . . . . . . . . .	L Near	 00000258 _TEXT	
  finish . . . . . . . . . . . .	L Near	 00000269 _TEXT	
displayArray . . . . . . . . . .	P Near	 00000175 _TEXT	Length= 00000036 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000186 _TEXT	
  continue . . . . . . . . . . .	L Near	 000001A5 _TEXT	
displayMedian  . . . . . . . . .	P Near	 000001F3 _TEXT	Length= 00000046 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000215 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000021E _TEXT	
  continue . . . . . . . . . . .	L Near	 00000230 _TEXT	
displayTitle . . . . . . . . . .	P Near	 00000166 _TEXT	Length= 0000000F Public STDCALL
exchangeElements . . . . . . . .	P Near	 000001E4 _TEXT	Length= 0000000F Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 00000143 _TEXT	Length= 00000023 Public STDCALL
  getNumber  . . . . . . . . . .	L Near	 0000014C _TEXT	
introduction . . . . . . . . . .	P Near	 00000110 _TEXT	Length= 00000033 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000110 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 000001AB _TEXT	Length= 00000039 Public STDCALL
  start  . . . . . . . . . . . .	L Near	 000001B7 _TEXT	
  compare  . . . . . . . . . . .	L Near	 000001BD _TEXT	
  switch . . . . . . . . . . . .	L Near	 000001CE _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 000001DA _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 000000C8h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 0000001Dh   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 0000000Ah   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 00000251 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cArraySize . . . . . . . . . . .	DWord	 00000891 _DATA	
cList  . . . . . . . . . . . . .	Byte	 000001D5 _DATA	
countArray . . . . . . . . . . .	DWord	 00000571 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 00000227 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instances  . . . . . . . . . . .	Byte	 00000181 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 00000026 _DATA	
intro3 . . . . . . . . . . . . .	Byte	 00000042 _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
medianIntro  . . . . . . . . . .	Byte	 00000173 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sort . . . . . . . . . . . . . .	Byte	 00000157 _DATA	
spaces . . . . . . . . . . . . .	Byte	 000001D3 _DATA	
unsort . . . . . . . . . . . . .	Byte	 00000138 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
