Microsoft (R) Macro Assembler Version 14.33.31630.0	    10/30/22 16:07:58
1Program 3 Data Validation, Looping, and Constant	     Page 1 - 1


				TITLE Program 3 Data Validation, Looping, and Constants

				; Author: Brian Dy
				; Last Modified: 10/30/2022
				; OSU email ADDress: DyB@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:  3             Due Date: 10/30/2022
				; Description: A program to allow a user to input signed integers and displays the sum of all negative numbers, the averages of those numbers, as well as the maximum number and minimum number. Program ends once a non-negative integer is given. 


				INCLUDE Irvine32.INC
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)

				; Set the constants for the program for comparison operators 

 = 00000000			CHECKPOSITIVE = 0	; Assigns a constant to check if the user inputs a non-negative number
 =-000000C8			TWOHUNDRED = -200
 =-00000064			ONEHUNDRED = -100
 =-00000032			FIFTY = -50
 =-00000001			ONE = -1


				; (insert constant definitions here)

 00000000			.data

 00000000 57 65 6C 63 6F		Greeting			BYTE	"Welcome to the Integer Accumulator by Brian Dy", 13, 10, 0
	   6D 65 20 74 6F
	   20 74 68 65 20
	   49 6E 74 65 67
	   65 72 20 41 63
	   63 75 6D 75 6C
	   61 74 6F 72 20
	   62 79 20 42 72
	   69 61 6E 20 44
	   79 0D 0A 00
 00000031 57 65 20 77 69		introduction		BYTE	"We will be accumulating user-input negative integers between the specified bounds, then displaying",13, 10
	   6C 6C 20 62 65
	   20 61 63 63 75
	   6D 75 6C 61 74
	   69 6E 67 20 75
	   73 65 72 2D 69
	   6E 70 75 74 20
	   6E 65 67 61 74
	   69 76 65 20 69
	   6E 74 65 67 65
	   72 73 20 62 65
	   74 77 65 65 6E
	   20 74 68 65 20
	   73 70 65 63 69
	   66 69 65 64 20
	   62 6F 75 6E 64
	   73 2C 20 74 68
	   65 6E 20 64 69
	   73 70 6C 61 79
	   69 6E 67 0D 0A
 00000095  73 74 61 74 69							BYTE	"statistics of the input values including minimum, maximum, and average values values, total sum,",13,10,"and total number of valid inputs.", 13,              10, 0
	   73 74 69 63 73
	   20 6F 66 20 74
	   68 65 20 69 6E
	   70 75 74 20 76
	   61 6C 75 65 73
	   20 69 6E 63 6C
	   75 64 69 6E 67
	   20 6D 69 6E 69
	   6D 75 6D 2C 20
	   6D 61 78 69 6D
	   75 6D 2C 20 61
	   6E 64 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 73 20 76 61
	   6C 75 65 73 2C
	   20 74 6F 74 61
	   6C 20 73 75 6D
	   2C 0D 0A 61 6E
	   64 20 74 6F 74
	   61 6C 20 6E 75
	   6D 62 65 72 20
	   6F 66 20 76 61
	   6C 69 64 20 69
	   6E 70 75 74 73
	   2E 0D 0A 00
 0000011B 57 68 61 74 20		getNamePrompt		BYTE	"What is your name? ", 0
	   69 73 20 79 6F
	   75 72 20 6E 61
	   6D 65 3F 20 00
 0000012F  0000001F [			userName			BYTE	31 DUP(0)
	    00
	   ]
 0000014E 48 65 6C 6C 6F		greetUser			BYTE	"Hello there, ", 0
	   20 74 68 65 72
	   65 2C 20 00
 0000015C 53 6F 20 6C 6F		endMessage			BYTE	"So long there, ", 0
	   6E 67 20 74 68
	   65 72 65 2C 20
	   00
 0000016C 50 6C 65 61 73		instructions		BYTE	"Please enter numbers in [-200, -100] or [-50, -1].", 13, 10, 0
	   65 20 65 6E 74
	   65 72 20 6E 75
	   6D 62 65 72 73
	   20 69 6E 20 5B
	   2D 32 30 30 2C
	   20 2D 31 30 30
	   5D 20 6F 72 20
	   5B 2D 35 30 2C
	   20 2D 31 5D 2E
	   0D 0A 00
 000001A1 45 6E 74 65 72		instructions2		BYTE	"Enter a non-negative number when you are finished and input stats will be shown.",13,10,"Let's first get your name. ", 13, 10, 0
	   20 61 20 6E 6F
	   6E 2D 6E 65 67
	   61 74 69 76 65
	   20 6E 75 6D 62
	   65 72 20 77 68
	   65 6E 20 79 6F
	   75 20 61 72 65
	   20 66 69 6E 69
	   73 68 65 64 20
	   61 6E 64 20 69
	   6E 70 75 74 20
	   73 74 61 74 73
	   20 77 69 6C 6C
	   20 62 65 20 73
	   68 6F 77 6E 2E
	   0D 0A 4C 65 74
	   27 73 20 66 69
	   72 73 74 20 67
	   65 74 20 79 6F
	   75 72 20 6E 61
	   6D 65 2E 20 0D
	   0A 00
 00000211 45 6E 74 65 72		getNumberPrompt		BYTE	"Enter a number: ", 13, 10, 0
	   20 61 20 6E 75
	   6D 62 65 72 3A
	   20 0D 0A 00
 00000224 00000000			userNumber			SDWORD	?
 00000228 54 68 69 73 20		errorMsg			BYTE	"This is not a number we're looking for (INVALID INPUT). Enter a number between [-200 and -100] or [-50 and -1]", 13, 10, 0
	   69 73 20 6E 6F
	   74 20 61 20 6E
	   75 6D 62 65 72
	   20 77 65 27 72
	   65 20 6C 6F 6F
	   6B 69 6E 67 20
	   66 6F 72 20 28
	   49 4E 56 41 4C
	   49 44 20 49 4E
	   50 55 54 29 2E
	   20 45 6E 74 65
	   72 20 61 20 6E
	   75 6D 62 65 72
	   20 62 65 74 77
	   65 65 6E 20 5B
	   2D 32 30 30 20
	   61 6E 64 20 2D
	   31 30 30 5D 20
	   6F 72 20 5B 2D
	   35 30 20 61 6E
	   64 20 2D 31 5D
	   0D 0A 00
 00000299 00000000			maxNumber			SDWORD	0	
 0000029D 00000000			minNumber			SDWORD	0
 000002A1 00000000			sumValues			SDWORD	?
 000002A5 00000000			roundedAvg			SDWORD	?
 000002A9 00000000			storeNumber			SDWORD	?	; used to store number in a register for later 
 000002AD 4D 75 73 74 20		errorMessage2		BYTE	"Must enter a number between [-50, -1]", 13, 10,0 
	   65 6E 74 65 72
	   20 61 20 6E 75
	   6D 62 65 72 20
	   62 65 74 77 65
	   65 6E 20 5B 2D
	   35 30 2C 20 2D
	   31 5D 0D 0A 00
 000002D5 00000000			counter				SDWORD	0
 000002D9 00000000			totalSum			SDWORD	0
 000002DD 20 76 61 6C 69		validNumbers		BYTE	" valid numbers were entered. ", 13, 10, 0
	   64 20 6E 75 6D
	   62 65 72 73 20
	   77 65 72 65 20
	   65 6E 74 65 72
	   65 64 2E 20 0D
	   0A 00
 000002FD 54 68 65 20 73		sumSentence			BYTE	"The sum of your valid numbers is: ", 0
	   75 6D 20 6F 66
	   20 79 6F 75 72
	   20 76 61 6C 69
	   64 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000320 54 68 65 20 61		getAverage			BYTE	"The average of your numbers is: ", 0
	   76 65 72 61 67
	   65 20 6F 66 20
	   79 6F 75 72 20
	   6E 75 6D 62 65
	   72 73 20 69 73
	   3A 20 00
 00000341 54 68 65 20 6D		minNumberSentence	BYTE	"The minimum valid number is: ", 0
	   69 6E 69 6D 75
	   6D 20 76 61 6C
	   69 64 20 6E 75
	   6D 62 65 72 20
	   69 73 3A 20 00
 0000035F 54 68 65 20 6D		maxNumberSentence	BYTE	"The maximum valid number is: ", 0
	   61 78 69 6D 75
	   6D 20 76 61 6C
	   69 64 20 6E 75
	   6D 62 65 72 20
	   69 73 3A 20 00



 00000000			.code
 00000000			main PROC



				; Print the greetings and intructions

					;	Print the introduction

 00000000  BA 00000000 R		MOV		EDX,OFFSET greeting
 00000005  E8 00000000 E		CALL	WriteString
 0000000A  E8 00000000 E		CALL	Crlf
 0000000F  BA 00000031 R		MOV		EDX, OFFSET	introduction
 00000014  E8 00000000 E		CALL	WriteString
 00000019  E8 00000000 E		CALL	Crlf


					;	Display instructions for the user

 0000001E  BA 0000016C R		MOV		EDX, OFFSET	instructions
 00000023  E8 00000000 E		CALL	WriteString
 00000028  E8 00000000 E		CALL	Crlf
 0000002D  BA 000001A1 R		MOV		EDX, OFFSET instructions2
 00000032  E8 00000000 E		CALL	WriteString
 00000037  E8 00000000 E		CALL	Crlf


					;	Get the User's name

 0000003C  BA 0000011B R		MOV		EDX, OFFSET	getNamePrompt
 00000041  E8 00000000 E		CALL	WriteString
 00000046  BA 0000012F R		MOV		EDX, OFFSET userName
 0000004B  B9 0000001E			MOV		ECX, 30
 00000050  E8 00000000 E		CALL	ReadString

					;	Greet the user
 00000055			_GreetUser:
 00000055  BA 0000014E R		MOV		EDX, OFFSET greetUser
 0000005A  E8 00000000 E		CALL	WriteString
 0000005F  BA 0000012F R		MOV		EDX, OFFSET userName
 00000064  E8 00000000 E		CALL	WriteString
 00000069  E8 00000000 E		CALL	Crlf
 0000006E  EB 1B			JMP		_GetNumber


				; Get data input

 00000070			_GetName:
					;	Get the User's name
 00000070  BA 0000011B R		MOV		EDX, OFFSET	getNamePrompt
 00000075  E8 00000000 E		CALL	WriteString
 0000007A  BA 0000012F R		MOV		EDX, OFFSET userName
 0000007F  B9 0000001E			MOV		ECX, 30
 00000084  E8 00000000 E		CALL	ReadString
 00000089  EB CA			JMP		_GreetUser

 0000008B			_GetNumber:	
					;	Get a valid number from the user
 0000008B  E8 00000000 E		CALL	Crlf
 00000090  BA 00000211 R		MOV		EDX, OFFSET	getNumberPrompt
 00000095  E8 00000000 E		CALL	WriteString
 0000009A  E8 00000000 E		CALL	ReadInt	
 0000009F  83 F8 00			CMP		EAX, CHECKPOSITIVE	
 000000A2  7D 26			JGE		_CheckPositive	; if user enters a non-negative number, program jumps to print data results
 000000A4  EB 00			JMP		_Check200		; checks the first condition if user input is < -200]



				; Validation checks to determine if numbers are valid

 000000A6			_Check200:	
					; check if number is <= -200. If number satisfies the conditions, it jumps to check if user input number is <= -100, otherwise throws an error message

 000000A6  3D FFFFFF38			CMP		EAX, TWOHUNDRED
 000000AB  0F 8C 000000F5		JL		_Error
 000000B1  EB 00			JMP		_Check100	


 000000B3			_Check100:	
					;check if the number is <= -100. If the numbers pass the condition, jump to the assignmax label in order to assign current maxNumber. 

 000000B3  83 F8 9C			CMP		EAX, ONEHUNDRED
 000000B6  7F 02			JG		_Check50
 000000B8  EB 2F			JMP		_CheckMax


 000000BA			_Check50:	
					;check if number is <= -50

 000000BA  83 F8 CE			CMP		EAX, FIFTY
 000000BD  0F 8C 000000E3		JL		_Error
 000000C3  7D 00			JGE		_Check1


 000000C5			_Check1:	
					; check if number is <= -1. If the numbers pass the condition, jump to the assignmin label in order to assign current minNumber.

 000000C5  83 F8 FF			CMP		EAX, ONE
 000000C8  EB 1F			JMP		_CheckMax


 000000CA			_CheckPositive:	
					; check if number is positive. Will end the user input once the input is > -1
 000000CA  EB 41			JMP	_ValidNumbers



				; Calculations

 000000CC			_ADDValue:	
					; sums the values of the valid numbers the user has inputted

 000000CC  01 05 000002A1 R		ADD		sumValues, EAX
 000000D2  A1 000002A1 R		MOV		EAX, sumValues
 000000D7  A3 000002D9 R		MOV		totalSum, EAX
 000000DC  E8 00000000 E		CALL	Crlf
 000000E1  FF 05 000002D5 R		INC		counter		; increments the counter +1 and number is used to calculate the average of the valid number inputs
 000000E7  EB A2			JMP		_GetNumber 


 000000E9			_CheckMax:
					; checks the numbers in the range of [-50, -1]. If current max number > user input, maximum (closest from 0) valid user value entered will be assigned to maxNumber
 000000E9  3B 05 00000299 R		CMP		EAX, maxNumber
 000000EF  74 0D			JE		_AssignMin	;  uses the JE (equal) in order to make sure that it does not assign the same value to the minNumber. Otherwise, EAX is				assigned to the max number
 000000F1  7C 04			JL		_AssignMax	;	Required to initially set max number from original EAX value as starting maxNumber is set to 0. EAX from input will be < maxNumber which this is needed to assign a new maxNumber
 000000F3  7F 02			JG		_AssignMax	;	Once max number is assigned, this section is needed to determine and set maxNumber and find out if userinput > current maxNumber. 
 000000F5  EB 07			JMP		_AssignMin	

 000000F7			_AssignMax:
					; Assigns maxNumber after CheckMax checks if current max number is > user input. 
 000000F7  A3 00000299 R		MOV		maxNumber, EAX
 000000FC  EB 00			JMP		_AssignMin



 000000FE			_AssignMin:	
					; After maxNumber has been checked.  Will jump to this section to see if the minimum (farthest from 0) valid user value entered will be assigned to the minNumber. 
 000000FE  3B 05 0000029D R		CMP		EAX, minNumber
 00000104  7F C6			JG		_ADDValue
 00000106  A3 0000029D R		MOV		minNumber, EAX
 0000010B  EB BF			JMP		_ADDValue



				; Display the results for all the items

 0000010D			_ValidNumbers:	
					; displays the total "valid numbers" the user has inputted
 0000010D  E8 00000000 E		CALL	Crlf
 00000112  A1 000002D5 R		MOV		EAX, counter
 00000117  E8 00000000 E		CALL	WriteDec
 0000011C  BA 000002DD R		MOV		EDX, OFFSET validNumbers
 00000121  E8 00000000 E		CALL	WriteString
 00000126  EB 00			JMP		_DisplaySum

 00000128			_DisplaySum:	
					; displays the sum of all the valid numbers the user has inputted

 00000128  E8 00000000 E		CALL	Crlf
 0000012D  BA 000002FD R		MOV		EDX, OFFSET sumSentence
 00000132  E8 00000000 E		CALL	WriteString
 00000137  A1 000002D9 R		MOV		EAX, totalSum
 0000013C  E8 00000000 E		CALL	WriteInt
 00000141  EB 00			JMP		_DisplayMinNumber

 00000143			_DisplayMinNumber:	
					; displays the minimum (farthest from 0) valid user value entered

 00000143  E8 00000000 E		CALL	Crlf
 00000148  BA 00000341 R		MOV		EDX, OFFSET minNumberSentence
 0000014D  E8 00000000 E		CALL	WriteString
 00000152  A1 0000029D R		MOV		EAX, minNumber
 00000157  E8 00000000 E		CALL	WriteInt
 0000015C  EB 00			JMP		_DisplayMaxNumber

 0000015E			_DisplayMaxNumber:	
					; displays the the maximum (closest from 0) valid user value entered

 0000015E  E8 00000000 E		CALL	Crlf
 00000163  BA 0000035F R		MOV		EDX, OFFSET maxNumberSentence
 00000168  E8 00000000 E		CALL	WriteString
 0000016D  A1 00000299 R		MOV		EAX, maxNumber
 00000172  E8 00000000 E		CALL	WriteInt
 00000177  EB 00			JMP		_DisplayAverage

 00000179			_DisplayAverage:		
					; calculates and displays the average of the summed numbers divided by the amount of times the user has inputted a valid number 

 00000179  E8 00000000 E		CALL	Crlf
 0000017E  BA 00000320 R		MOV		EDX, OFFSET	getAverage
 00000183  E8 00000000 E		CALL	WriteString
 00000188  8B 15 000002D5 R		MOV		EDX, counter
 0000018E  A1 000002D9 R		MOV		EAX, totalSum
 00000193  99				CDQ
 00000194  F7 3D 000002D5 R		idiv	counter
 0000019A  E8 00000000 E		CALL	writeint
 0000019F  E8 00000000 E		CALL	Crlf
 000001A4  EB 0F			JMP		_EndingMessage


 000001A6			_Error:		
					; display user error message if user inputs an invalid number

 000001A6  BA 00000228 R		MOV		EDX, OFFSET	errorMsg
 000001AB  E8 00000000 E		CALL	WriteString
 000001B0  E9 FFFFFED6			JMP		_GetNumber



				; Closing statement

 000001B5			_EndingMessage:
 000001B5  E8 00000000 E		CALL	Crlf
 000001BA  BA 0000015C R		MOV		EDX, OFFSET endMessage
 000001BF  E8 00000000 E		CALL	WriteString
 000001C4  BA 0000012F R		MOV		EDX, OFFSET	userName
 000001C9  E8 00000000 E		CALL	WriteString
 000001CE  E8 00000000 E		CALL	Crlf


					Invoke ExitProcess,0	; exit to operating system
 000001D3  6A 00	   *	    push   +000000000h
 000001D5  E8 00000000 E   *	    call   ExitProcess
 000001DA			main ENDP

				; (insert ADDitional procedures here)

				END main

Microsoft (R) Macro Assembler Version 14.33.31630.0	    10/30/22 16:07:58
1Program 3 Data Validation, Looping, and Constant	     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000037D Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001DA Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000001DA Public STDCALL
  _GreetUser . . . . . . . . . .	L Near	 00000055 _TEXT	
  _GetName . . . . . . . . . . .	L Near	 00000070 _TEXT	
  _GetNumber . . . . . . . . . .	L Near	 0000008B _TEXT	
  _Check200  . . . . . . . . . .	L Near	 000000A6 _TEXT	
  _Check100  . . . . . . . . . .	L Near	 000000B3 _TEXT	
  _Check50 . . . . . . . . . . .	L Near	 000000BA _TEXT	
  _Check1  . . . . . . . . . . .	L Near	 000000C5 _TEXT	
  _CheckPositive . . . . . . . .	L Near	 000000CA _TEXT	
  _ADDValue  . . . . . . . . . .	L Near	 000000CC _TEXT	
  _CheckMax  . . . . . . . . . .	L Near	 000000E9 _TEXT	
  _AssignMax . . . . . . . . . .	L Near	 000000F7 _TEXT	
  _AssignMin . . . . . . . . . .	L Near	 000000FE _TEXT	
  _ValidNumbers  . . . . . . . .	L Near	 0000010D _TEXT	
  _DisplaySum  . . . . . . . . .	L Near	 00000128 _TEXT	
  _DisplayMinNumber  . . . . . .	L Near	 00000143 _TEXT	
  _DisplayMaxNumber  . . . . . .	L Near	 0000015E _TEXT	
  _DisplayAverage  . . . . . . .	L Near	 00000179 _TEXT	
  _Error . . . . . . . . . . . .	L Near	 000001A6 _TEXT	
  _EndingMessage . . . . . . . .	L Near	 000001B5 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CHECKPOSITIVE  . . . . . . . . .	Number	 00000000h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FIFTY  . . . . . . . . . . . . .	Number	 -00000032h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
Greeting . . . . . . . . . . . .	Byte	 00000000 _DATA	
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
ONEHUNDRED . . . . . . . . . . .	Number	 -00000064h   
ONE  . . . . . . . . . . . . . .	Number	 -00000001h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
TWOHUNDRED . . . . . . . . . . .	Number	 -000000C8h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
counter  . . . . . . . . . . . .	DWord	 000002D5 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
endMessage . . . . . . . . . . .	Byte	 0000015C _DATA	
errorMessage2  . . . . . . . . .	Byte	 000002AD _DATA	
errorMsg . . . . . . . . . . . .	Byte	 00000228 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
getAverage . . . . . . . . . . .	Byte	 00000320 _DATA	
getNamePrompt  . . . . . . . . .	Byte	 0000011B _DATA	
getNumberPrompt  . . . . . . . .	Byte	 00000211 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greetUser  . . . . . . . . . . .	Byte	 0000014E _DATA	
instructions2  . . . . . . . . .	Byte	 000001A1 _DATA	
instructions . . . . . . . . . .	Byte	 0000016C _DATA	
introduction . . . . . . . . . .	Byte	 00000031 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxNumberSentence  . . . . . . .	Byte	 0000035F _DATA	
maxNumber  . . . . . . . . . . .	DWord	 00000299 _DATA	
minNumberSentence  . . . . . . .	Byte	 00000341 _DATA	
minNumber  . . . . . . . . . . .	DWord	 0000029D _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
roundedAvg . . . . . . . . . . .	DWord	 000002A5 _DATA	
storeNumber  . . . . . . . . . .	DWord	 000002A9 _DATA	
sumSentence  . . . . . . . . . .	Byte	 000002FD _DATA	
sumValues  . . . . . . . . . . .	DWord	 000002A1 _DATA	
totalSum . . . . . . . . . . . .	DWord	 000002D9 _DATA	
userName . . . . . . . . . . . .	Byte	 0000012F _DATA	
userNumber . . . . . . . . . . .	DWord	 00000224 _DATA	
validNumbers . . . . . . . . . .	Byte	 000002DD _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
